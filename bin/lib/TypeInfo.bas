''------------------------------------------------------------------------------
'' Implement Tye Information.
''------------------------------------------------------------------------------

'' TypeInfo is generated by the compiler for each type T.
Interface TypeInfo Of T
    '' Size of the type in bytes, excluding alignment
    Const size As UInteger

    '' Alignment of the type in bytes
    Const alignment As UInteger

    '' Size of the type in bytes, including alignment
    Const stride As UInteger

    '' Check if the type has a trivial destructor
    '' If true, then no call to constructor is required to destroy the object
    Const hasTrivialDestructor As Bool

    '' Check if the type is trivially copyable
    '' If true then memcpy can be used to copy the object
    Const isTriviallyCopyable As Bool

    '' Check if the type can be moved or copied
    '' If true then move or copy functions can be used
    Const canCopyOrMove As Bool

    '' Create object at given address
    Sub create(object As T Ptr)

    '' Calls appropriate destructor for the object at given address
    Sub destroy(object As T Ptr)

    '' Calls appropriate destructor for count objects starting at given address
    sub destroy(object As T Ptr, count As UInteger)

    '' Depending on T, this function will either copy or move the object out of the old address.
    '' If copy is made, then original object is will be destroyed
    Function take(object As T Ptr) As T

    '' Move the object from source to destination
    '' Depending on T this might do simple memcpy or call copy/move constructors and destructors as needed
    Sub move(dest As T Ptr, source As T Ptr)

    '' Move array of objects from source to destination
    '' Depending on T this might do a simple memcpy or call copy/move constructors and destructors for each item as needed
    Sub move(dest As T Ptr, source As T Ptr, count As UInteger)

    '' Copy item from source to destination.
    '' Depending on T this might do a simple memcpy or call copy/move constructors as needed
    Sub copy(dest As T Ptr, source As T Ptr)

    '' Copy array of items from source to destination.
    '' Depending on T this might do a simple memcpy or call copy/move constructors as needed
    Sub copy(dest As T Ptr, source As T Ptr, count As UInteger)
End Interface
